module I18nSynchronizer
  class File
    # @attr name [String] file name
    # @attr ext [String] file extension
    # @attr sections [Array<Section>]
    class StringsFile < File
      self.extension = "strings"

      # @return [String]
      def serialized
        content = [header]
        content << sections.map do |section|
          section_content = [section.header]
          section_content << section.localizations
                                 .map { |key, locales| {:key => key, :value => locales[@locale]} }
                                 .sort { |l,r| l[:key].to_s <=> r[:key].to_s }
                                 .map { |l10n| "\"#{l10n[:key]}\" = \"#{l10n[:value]}\";\n" }
          section_content << section.footer

          section_content
        end
        content << footer unless footer.empty?

        content.join "\n"
      end

      private

      def header
        <<-HEADER
/**
 * Apple Strings File
 * Generated by i18n-synchronizer #{I18nSynchronizer::VERSION}
 * Locale: #{@locale}
 */
        HEADER
      end

      def footer
        ""
      end
    end
  end
end